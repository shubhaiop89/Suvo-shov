---
url: "https://shov.com/docs"
title: "Shov - AI Database Engine"
---

# API Reference

## A complete guide to all Shov commands and operations.

[📄 OpenAPI JSON](https://shov.com/openapi.json) [📄 OpenAPI YAML](https://shov.com/openapi.yaml)

### Setup

[INSTALL](https://shov.com/docs#install) [NEW](https://shov.com/docs#new) [CLAIM](https://shov.com/docs#claim)

### Authentication

All API requests must be authenticated using a Bearer Token. Provide your project\'s API key in the \`Authorization\` header.

`Authorization: Bearer YOUR_API_KEY`

[SEND-OTP](https://shov.com/docs#send-otp) [VERIFY-OTP](https://shov.com/docs#verify-otp)

### Key/Value

[SET](https://shov.com/docs#set) [GET](https://shov.com/docs#get) [FORGET](https://shov.com/docs#forget)

### Collections

[ADD](https://shov.com/docs#add) [ADD-MANY](https://shov.com/docs#add-many) [WHERE](https://shov.com/docs#where) [UPDATE](https://shov.com/docs#update) [REMOVE](https://shov.com/docs#remove) [CLEAR](https://shov.com/docs#clear) [BATCH](https://shov.com/docs#batch) [COUNT](https://shov.com/docs#count)

### Search

[SEARCH](https://shov.com/docs#search)

### Streaming

[BROADCAST](https://shov.com/docs#broadcast) [SUBSCRIBE](https://shov.com/docs#subscribe)

### Files

[UPLOAD](https://shov.com/docs#upload) [UPLOAD-URL](https://shov.com/docs#upload-url) [FORGET-FILE](https://shov.com/docs#forget-file)

### Utilities

[TOKEN](https://shov.com/docs#token) [CONTENTS](https://shov.com/docs#contents)

#### INSTALL

Install the Shov CLI globally via npm.

No examples available for INSTALL.

##### Synopsis

`npm install -g shov`

##### 📥Returns

```
# Successful installation output:
+ shov@2.3.0
added 1 package in 2.1s
```

##### ⚠️Errors

`EACCES`— Permission denied — Try using sudo or configure npm properly

`ENOTFOUND`— Network error — Check your internet connection

##### 🔹Notes

The CLI requires Node.js 16+ and npm. After installation, the \`shov\` command will be available globally.

#### NEW

Create a new Shov project with automatic API key generation.

No examples available for NEW.

##### Synopsis

`shov new <project-name> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| project-name | string | ✓ | The name of your new project (alphanumeric, hyphens allowed). |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "projectName": "my-first-project",
  "apiKey": "shov_live_abc123def456...",
  "message": "Project created successfully"
}
```

##### ⚠️Errors

`400`— Bad Request — Project name is invalid or already exists

`429`— Too Many Requests — Rate limit exceeded

##### 🔹Notes

Project names must be unique, alphanumeric with hyphens allowed. Your API key is generated immediately and should be stored securely. No email registration required.

⚠️ IMPORTANT: Save your API key immediately - it cannot be recovered if lost.

#### CLAIM

Claim an anonymous project by associating it with your email address.

No examples available for CLAIM.

##### Synopsis

`shov claim <project-name> <email> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| project-name | string | ✓ | The name of the anonymous project to claim. |
| email | string | ✓ | Your email address to associate with the project. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
// Initiate response:
{
  "success": true,
  "message": "A verification code has been sent to user@example.com."
}

// Verify response:
{
  "success": true,
  "message": "Project claimed successfully! You can now manage this project from your account."
}
```

##### ⚠️Errors

`400`— Bad Request — Project name, email, or PIN is invalid

`403`— Forbidden — Project has already been claimed or you already have a free organization

`404`— Not Found — Project not found

`429`— Too Many Requests — Rate limit exceeded

##### 🔹Notes

The claim process allows users who created projects anonymously to later associate them with their email address for dashboard access and management. This is a two-step process:

1\. \*\*Initiate\*\*: Send a verification code to the provided email
2\. \*\*Verify\*\*: Confirm ownership with the OTP code

⚠️ IMPORTANT: Only anonymous projects can be claimed. Each user can only have one free organization, so claiming is limited if you already have a free organization.

The claim process includes rate limiting and abuse prevention to ensure security.

#### SET

Store a key-value pair.

CLICURLJS-SDK

Copy

```
shov set my_key \'{"message": "hello world"}\'
```

##### Synopsis

`shov set <key> <value> [--ttl <seconds>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| key | string | ✓ | The key for the value. |
| value | json | ✓ | The JSON value to store. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --ttl | integer |  | Optional time-to-live in seconds. |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true
}
```

##### ⚠️Errors

`400`— Bad Request — "name" is required or JSON is malformed

`401`— Unauthorized — API key is missing or invalid

#### GET

Retrieve a key-value pair.

CLICURLJS-SDK

Copy

```
shov get my_key
```

##### Synopsis

`shov get <key> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| key | string | ✓ | The key to retrieve. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
// If found:
{
  "success": true,
  "value": { "message": "hello world" }
}

// If not found:
{
  "success": true,
  "value": null
}
```

##### ⚠️Errors

`401`— Unauthorized — API key is missing or invalid

##### 🔹Notes

If a key is not found, the command succeeds and returns a \`null\` value.

#### FORGET

Permanently delete a key-value pair.

CLICURLJS-SDK

Copy

```
shov forget my_key
```

##### Synopsis

`shov forget <key> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| key | string | ✓ | The key to delete. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "message": "Item forgotten."
}
```

##### ⚠️Errors

`401`— Unauthorized — API key is missing or invalid

`404`— Not Found — The requested key does not exist

#### ADD

Add a JSON object to a collection.

CLICURLJS-SDK

Copy

```
shov add users \'{"name": "Alice", "role": "admin"}\'
```

##### Synopsis

`shov add <collection> <value> [--ttl <seconds>] [--id <custom_id>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection. |
| value | json | ✓ | The JSON object to add. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --ttl | integer |  | Optional time-to-live in seconds. |
| --id | string |  | Provide a custom ID for the item. |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "id": "item_abc123"
}
```

##### ⚠️Errors

`400`— Bad Request — "name" is required or JSON is malformed

`401`— Unauthorized — API key is missing or invalid

##### 🔹Notes

Item IDs are unique per collection. If no ID is provided, a unique one will be generated.

#### ADD-MANY

Add multiple JSON objects to a collection at once.

CLICURLJS-SDK

Copy

```
shov add-many users \'[{"name": "Alice"}, {"name": "Bob"}]\'
```

##### Synopsis

`shov add-many <collection> <items> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection. |
| items | json array | ✓ | An array of JSON objects to add. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "ids": ["item_abc123", "item_def456", "item_ghi789"]
}
```

##### ⚠️Errors

`400`— Bad Request — "name" or "items" are missing/invalid

`401`— Unauthorized — API key is missing or invalid

#### WHERE

Filter items in a collection based on JSON properties.

CLICURLJS-SDK

Copy

```
shov where users -f \'{"role": "admin"}\'
```

##### Synopsis

`shov where <collection> [--filter <json>] [--limit <number>] [--offset <number>] [--sort <json>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection to query. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --filter, -f | json |  | JSON object for filtering. |
| --limit | integer |  | Maximum number of items to return. |
| --offset | integer |  | Skip this many results (for pagination). |
| --sort | json |  | JSON object for sorting results. |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "items": [\
    {\
      "id": "item_abc123",\
      "name": "users",\
      "type": "collection_item",\
      "value": { "name": "Alice", "role": "admin" },\
      "createdAt": "2024-01-15T10:30:00Z"\
    }\
  ]
}
```

##### ⚠️Errors

`400`— Bad Request — "name" is required or filter is malformed

`401`— Unauthorized — API key is missing or invalid

#### UPDATE

Update an item in a collection by collection name and ID.

CLICURLJS-SDK

Copy

```
shov update users item_id \'{"name": "Alice V2"}\'
```

##### Synopsis

`shov update <collection> <id> <value> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection. |
| id | string | ✓ | The ID of the item to update. |
| value | json | ✓ | A JSON object containing the fields to update. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "message": "Item updated.",
  "id": "item_abc123"
}
```

##### ⚠️Errors

`400`— Bad Request — "collection", "id", or "value" is missing

`401`— Unauthorized — API key is missing or invalid

`404`— Not Found — Item with the specified ID not found

#### REMOVE

Remove an item from a collection by collection name and ID.

CLICURLJS-SDK

Copy

```
shov remove users item_id
```

##### Synopsis

`shov remove <collection> <id> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection. |
| id | string | ✓ | The ID of the item to remove. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "message": "Item removed.",
  "id": "item_abc123"
}
```

##### ⚠️Errors

`400`— Bad Request — "collection" or "id" is missing

`401`— Unauthorized — API key is missing or invalid

`404`— Not Found — Item with the specified ID not found

#### CLEAR

Clear all items from a collection.

CLICURLJS-SDK

Copy

```
shov clear users
```

##### Synopsis

`shov clear <collection> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection to clear. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "count": 42
}
```

##### ⚠️Errors

`400`— Bad Request — "name" of collection is required

`401`— Unauthorized — API key is missing or invalid

#### BATCH

Execute multiple operations atomically in a single transaction.

No examples available for BATCH.

##### Synopsis

`shov batch <operations> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| operations | json array | ✓ | Array of operations to execute atomically. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "results": [\
    { "success": true },\
    { "success": true, "id": "item_abc123" },\
    { "success": true, "message": "Item updated.", "id": "item-456" }\
  ],
  "transactionId": "txn_def456ghi789",
  "operationsExecuted": 3
}
```

##### ⚠️Errors

`400`— Bad Request — "operations" array is required, empty, or contains invalid operations

`401`— Unauthorized — API key is missing or invalid

`409`— Conflict — One or more operations failed, entire transaction rolled back

##### 🔹Notes

Batch operations execute atomically - either all operations succeed or all fail. This is perfect for implementing complex workflows like e-commerce checkouts, user registration flows, or any scenario requiring data consistency across multiple operations.

Supported operation types:
• set - Set key-value pairs
• get - Read values (for read-your-writes consistency)
• add - Add items to collections
• update - Update collection items by ID
• remove - Remove collection items by ID
• forget - Delete keys
• clear - Clear entire collections

⚠️ IMPORTANT: All operations in a batch are executed atomically. If any operation fails, the entire batch is rolled back and no changes are made.

#### COUNT

Count the number of items in a collection with optional filtering.

No examples available for COUNT.

##### Synopsis

`shov count <collection> [--filter <json>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| collection | string | ✓ | The name of the collection to count. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --filter, -f | json |  | JSON object for filtering items before counting. |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "count": 42,
  "collection": "users"
}
```

##### ⚠️Errors

`400`— Bad Request — "name" is required or filter is malformed

`401`— Unauthorized — API key is missing or invalid

##### 🔹Notes

COUNT returns the total number of items matching the filter criteria without transferring the actual data, making it efficient for large collections. Supports all the same filtering options as the WHERE operation.

#### SEARCH

Perform vector search across keys and collections with optional filtering. Results are automatically filtered by relevance (minimum score 0.5 by default).

CLICURLJS-SDK

Copy

```
shov search "electric guitar"
```

##### Synopsis

`shov search <query> [--collection <name>] [--top-k <number>] [--min-score <number>] [--filters <json>] [--limit <number>] [--offset <number>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| query | string | ✓ | The search query string. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --collection, -c | string |  | Limit search to a specific collection. |
| --top-k | integer |  | The number of results to return. Default is 10. |
| --topK | integer |  | Alias for --top-k (backward compatibility). |
| --min-score | float |  | The minimum similarity score for results. Default is 0.5 for relevance. Minimum allowed is 0.3. |
| --minScore | float |  | Alias for --min-score (backward compatibility). |
| --filters | json |  | JSON object to filter results by specific fields (e.g. {\"user\\_id\": \"123\", \"category\": \"electronics\"}). |
| --limit | integer |  | Alias for --top-k (pagination support). |
| --offset | integer |  | Skip this many results (for pagination). |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "query": "smartphone",
  "project": "my-project",
  "collection": null,
  "total": 1,
  "items": [\
    {\
      "id": "item_abc123",\
      "name": "products",\
      "type": "collection_item",\
      "value": { "name": "iPhone Case", "user_id": "user123", "category": "electronics" },\
      "createdAt": "2024-01-15T10:30:00Z",\
      "_score": 0.94\
    }\
  ]
}
```

##### ⚠️Errors

`400`— Bad Request — "query" is required or filters JSON is malformed

`401`— Unauthorized — API key is missing or invalid

##### 🔹Notes

Vector search finds semantically similar items first, then applies JSON field filters for precise results. Filters use exact matching on JSON properties. Use --json flag for structured output suitable for scripting and automation.

⚠️ IMPORTANT: Vector indexing has eventual consistency - there is a small delay between adding data and it becoming searchable. Plan your application logic accordingly.

#### UPLOAD

Upload a file directly.

CLICURLJS-SDK

Copy

```
shov upload ./path/to/file.txt
```

##### Synopsis

`shov upload <filepath> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| filepath | string | ✓ | The local path to the file to upload. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "fileId": "file_abc123",
  "url": "https://your-project.shov.com/files/file_abc123"
}
```

##### ⚠️Errors

`401`— Unauthorized — API key is missing or invalid

`404`— Not Found — File not found at the specified path

#### UPLOAD-URL

Get a pre-signed URL for client-side file uploads.

CLICURLJS-SDK

Copy

```
shov upload-url my-file.txt
```

##### Synopsis

`shov upload-url <filename> [--mime-type <type>] [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |\n| filename | string | ✓ | The name of the file to be uploaded. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --mime-type | string |  | MIME type of the file (auto-detected if not provided). |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "uploadUrl": "https://storage.shov.com/upload/...",
  "fileId": "file_abc123"
}
```

##### ⚠️Errors

`400`— Bad Request — "fileName" is required

`401`— Unauthorized — API key is missing or invalid

#### FORGET-FILE

Permanently delete a file.

CLICURLJS-SDK

Copy

```
shov forget-file my-file.txt
```

##### Synopsis

`shov forget-file <filename> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| filename | string | ✓ | The name of the file to delete. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "count": 1
}
```

##### ⚠️Errors

`400`— Bad Request — "filename" is required

`401`— Unauthorized — API key is missing or invalid

`404`— Not Found — File not found

#### SEND-OTP

Send a one-time password to an identifier.

CLICURLJS-SDK

Copy

```
shov send-otp user@example.com
```

##### Synopsis

`shov send-otp <identifier> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| identifier | string | ✓ | The identifier (e.g., email) to send the OTP to. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "message": "Verification code sent to user@example.com."
}
```

##### ⚠️Errors

`400`— Bad Request — "identifier" is required or invalid

`401`— Unauthorized — API key is missing or invalid

#### VERIFY-OTP

Verify a one-time password for an identifier.

CLICURLJS-SDK

Copy

```
shov verify-otp user@example.com 1234
```

##### Synopsis

`shov verify-otp <identifier> <pin> [--json]`

##### 📑Arguments

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| identifier | string | ✓ | The identifier (e.g., email) associated with the OTP. |
| pin | string | ✓ | The one-time password to verify. |

##### 📑Options

| Argument | Type | Required | Description |
| --- | --- | --- | --- |
| --json | flag |  | Output structured JSON for scripting. |

##### 📥Returns

```
{
  "success": true,
  "message": "PIN verified successfully."
}
```

##### ⚠️Errors

`400`— Bad Request — "identifier" or "pin" are missing, or PIN is invalid/expired

`401`— Unauthorized — API key is missing or invalid

#### BROADCAST

